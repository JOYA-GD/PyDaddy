Importing and Exporting Data
============================

Reading data, input formats
---------------------------

``pydaddy.Characterize()`` takes two main input arguments, the main
timeseries ``data``, and the timestep ``t``. See the `Getting
Started <./1%20-%20Getting%20Started.ipynb>`__ for more details.

-  ``data`` should be a list containing one or two Numpy arrays, for
   scalar or vector case respectively.
-  ``t`` can either be a scalar, denoting the time-interval between
   samples, an array (of the same length as the array(s) in ``data``)
   corresponding to the timestamps of each datapoint. ``pydaddy``
   assumes that data-points are evenly spaced.

The example notebooks use a specialized function
``load_sample_dataset()`` to load example data, but the data could come
from any source, as long as it is in the correct format. For example, in
the `Fitting non-polynomial
functions <./4%20-%20Fitting%20non-polynomial%20functions.ipynb>`__, the
data was generated by simulating an SDE.

Exporting data
--------------

``pydaddy`` allows you to export data as a Pandas DataFrame, or save
data into a CSV file.

.. code:: ipython3

    import pydaddy
    import pandas as pd

.. code:: ipython3

    data, t = pydaddy.load_sample_dataset('model-data-vector-ternary')
    ddsde = pydaddy.Characterize(data, t, bins=20, show_summary=False)

``ddsde.get_data()`` returns a Pandas dataframe containing the drift and
diffusion coefficients. By default data is returned as binned averages,
with the number of bins controlled by the ``bins`` parameter in the
``pydaddy.Characterize()`` call.

.. code:: ipython3

    df = ddsde.export_data()

``df`` is a `Pandas <https://pandas.pydata.org>`__ dataframe, and
supports various data manipulations: see `Pandas
documentation <https://pandas.pydata.org/docs/user_guide/index.html>`__
for more details.

For example, ``df.head(n)`` shows the first ``n`` rows of the dataframe.
Individual columns (e.g. ``drift_x``) can be accessed using the column
names. (e.g. ``df.drift_x``).

.. code:: ipython3

    df.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>x</th>
          <th>y</th>
          <th>drift_x</th>
          <th>drift_y</th>
          <th>diffusion_x</th>
          <th>diffusion_y</th>
          <th>diffusion_xy</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>5</th>
          <td>-0.473684</td>
          <td>-0.999993</td>
          <td>0.008879</td>
          <td>0.069661</td>
          <td>0.001583</td>
          <td>0.001583</td>
          <td>0.008879</td>
        </tr>
        <tr>
          <th>6</th>
          <td>-0.368421</td>
          <td>-0.999993</td>
          <td>0.002540</td>
          <td>0.060316</td>
          <td>0.002648</td>
          <td>0.002648</td>
          <td>0.002540</td>
        </tr>
        <tr>
          <th>7</th>
          <td>-0.263158</td>
          <td>-0.999993</td>
          <td>-0.005515</td>
          <td>0.055219</td>
          <td>0.004341</td>
          <td>0.004341</td>
          <td>-0.005515</td>
        </tr>
        <tr>
          <th>8</th>
          <td>-0.157895</td>
          <td>-0.999993</td>
          <td>-0.006491</td>
          <td>0.051776</td>
          <td>0.004562</td>
          <td>0.004562</td>
          <td>-0.006491</td>
        </tr>
        <tr>
          <th>9</th>
          <td>-0.052632</td>
          <td>-0.999993</td>
          <td>-0.012554</td>
          <td>0.047965</td>
          <td>0.004476</td>
          <td>0.004476</td>
          <td>-0.012554</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    df.drift_x




.. parsed-literal::

    5      0.008879
    6      0.002540
    7     -0.005515
    8     -0.006491
    9     -0.012554
             ...   
    370    0.012908
    371    0.004369
    372   -0.000901
    373   -0.010205
    389    0.035175
    Name: drift_x, Length: 314, dtype: float64



As mentioned before, the data is returned as binned averages by default.
if raw, unbinned drift and diffusion data is required (i.e. drift and
diffusion coefficients estimated at each time-point, use parameter
``raw=True``. Note that the raw estimates will be very noisy. However,
the raw estimates can be useful, for example, for further analysis with
custom regression or curve-fitting.

.. code:: ipython3

    df_raw = ddsde.export_data(raw=True)
    df_raw.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>x</th>
          <th>y</th>
          <th>drift_x</th>
          <th>drift_y</th>
          <th>diffusion_x</th>
          <th>diffusion_y</th>
          <th>diffusion_xy</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.040464</td>
          <td>0.185828</td>
          <td>-0.849680</td>
          <td>-0.197604</td>
          <td>0.086635</td>
          <td>0.004686</td>
          <td>0.020148</td>
        </tr>
        <tr>
          <th>1</th>
          <td>-0.061497</td>
          <td>0.162115</td>
          <td>0.467746</td>
          <td>0.182182</td>
          <td>0.026254</td>
          <td>0.003983</td>
          <td>0.010226</td>
        </tr>
        <tr>
          <th>2</th>
          <td>-0.005368</td>
          <td>0.183977</td>
          <td>0.800044</td>
          <td>0.231554</td>
          <td>0.076809</td>
          <td>0.006434</td>
          <td>0.022230</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.090638</td>
          <td>0.211764</td>
          <td>1.142051</td>
          <td>-0.939814</td>
          <td>0.156514</td>
          <td>0.105990</td>
          <td>-0.128798</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.227684</td>
          <td>0.098986</td>
          <td>-0.346819</td>
          <td>0.594684</td>
          <td>0.014434</td>
          <td>0.042438</td>
          <td>-0.024750</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    len(df), len(df_raw)




.. parsed-literal::

    (314, 580866)



Saving data
~~~~~~~~~~~

To save data to a CSV file, use ``ddsde.get_data()`` while specifying a
file-name using the ``filename`` parameter.

.. code:: ipython3

    ddsde.export_data(filename='example_export.csv')

